name: Feature

on:
  push:
    branches: 
      - 'feature/**'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      
      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  test:
    name: Test
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features
      
      - name: Generate test coverage
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: '0.15.0'
          args: '--ignore-tests --workspace'
          
      - name: Check test coverage
        run: |
          COVERAGE=$(grep -E 'coverage: [0-9.]+' tarpaulin-report.txt | tail -1 | grep -oE '[0-9.]+')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 85" | bc -l) )); then
            echo "Test coverage is below 85%"
            exit 1
          fi

  build-test:
    name: Build Test
    needs: test
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu, aarch64-apple-darwin]
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            extra_packages: gcc-aarch64-linux-gnu
            use_cross: true
          - target: aarch64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      
      - name: Install cross-compilation dependencies
        if: matrix.extra_packages
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.extra_packages }}
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.target }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
      
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.use_cross || false }}
      
      - name: Verify binary size
        run: |
          BINARY_SIZE=$(stat -c %s target/${{ matrix.target }}/release/arkavo || stat -f %z target/${{ matrix.target }}/release/arkavo)
          MAX_SIZE=1073741824  # 1GB in bytes
          echo "Binary size: $BINARY_SIZE bytes"
          if (( BINARY_SIZE > MAX_SIZE )); then
            echo "Binary size exceeds 1GB limit"
            exit 1
          fi

  performance-check:
    name: Performance Check
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      
      - name: Run performance tests
        run: |
          # Simple performance check - will be enhanced in the future
          echo "Running performance check..."
          START_TIME=$(date +%s%N)
          ./target/release/arkavo plan
          END_TIME=$(date +%s%N)
          DURATION=$((($END_TIME - $START_TIME) / 1000000))  # Convert to milliseconds
          
          echo "Command execution time: $DURATION ms"
          if (( DURATION > 100 )); then
            echo "Performance target not met: response time > 100ms"
            exit 1
          fi
          
          echo "All performance checks passed"

  release-readiness:
    name: Release Readiness
    if: github.event_name == 'pull_request'
    needs: [lint, test, build-test, performance-check]
    runs-on: ubuntu-latest
    steps:
      - name: Pull Request is ready for merge
        run: |
          echo "All validation checks have passed"
          echo "This pull request is ready to be merged into main"