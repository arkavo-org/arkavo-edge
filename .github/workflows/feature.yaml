name: Feature

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_NET_TIMEOUT: 10

jobs:
  # Quick checks that can run in parallel
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "clippy"
      - run: cargo clippy -- -D warnings

  # Tests and builds can run in parallel
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "test"
      - name: Run tests
        run: cargo test --workspace
      
      - name: Install cargo-tarpaulin
        run: |
          curl -L https://github.com/xd009642/tarpaulin/releases/download/0.31.2/cargo-tarpaulin-x86_64-unknown-linux-musl.tar.gz | tar xzf - -C $HOME/.cargo/bin
          
      - name: Generate test coverage
        run: cargo tarpaulin --ignore-tests --workspace --out Xml
          
      - name: Check test coverage
        run: |
          COVERAGE=$(grep -E 'line-rate="[0-9.]+"' cobertura.xml | head -1 | grep -oE '[0-9.]+')
          COVERAGE_PERCENT=$(awk -v cov="$COVERAGE" 'BEGIN {printf "%.2f", cov * 100}')
          echo "Coverage: $COVERAGE_PERCENT%"

  build-linux:
    name: Build Linux (musl)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "linux-musl"
          
      - name: Install musl tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
      
      - name: Build
        run: cargo build --release --target x86_64-unknown-linux-musl
      
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: arkavo-x86_64-unknown-linux-musl
          path: target/x86_64-unknown-linux-musl/release/arkavo
          retention-days: 1

  build-macos:
    name: Build macOS (ARM64)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "macos-arm64"
      
      - name: Build
        run: cargo build --release --target aarch64-apple-darwin
      
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: arkavo-aarch64-apple-darwin
          path: target/aarch64-apple-darwin/release/arkavo
          retention-days: 1

  # Performance check can run independently
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "perf"
      
      - name: Check binary size
        run: |
          cargo build --release
          SIZE=$(du -b target/release/arkavo | cut -f1)
          SIZE_MB=$(( SIZE / 1024 / 1024 ))
          echo "Binary size: $SIZE_MB MB"
          
          if [ $SIZE_MB -gt 100 ]; then
            echo "Warning: Binary size exceeds 100 MB"
          fi
          
      - name: Check build time
        run: |
          cargo clean
          BUILD_START=$(date +%s)
          cargo build --release
          BUILD_END=$(date +%s)
          BUILD_TIME=$((BUILD_END - BUILD_START))
          
          echo "Build time: $BUILD_TIME seconds"
          
          if [ $BUILD_TIME -gt 300 ]; then
            echo "Warning: Build time exceeds 5 minutes"
          fi

  # Smoke tests depend on builds
  smoke-test-linux:
    name: Smoke Test Linux (${{ matrix.container }})
    needs: build-linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container:
          - alpine:latest
          - ubuntu:latest
          - ubuntu:22.04
    container:
      image: ${{ matrix.container }}
    steps:
      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: arkavo-x86_64-unknown-linux-musl
          
      - name: Test binary
        run: |
          chmod +x arkavo
          ./arkavo --version

  smoke-test-macos:
    name: Smoke Test macOS
    needs: build-macos
    runs-on: macos-latest
    steps:
      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: arkavo-aarch64-apple-darwin
          
      - name: Test binary
        run: |
          chmod +x arkavo
          ./arkavo --version

  # Final check that depends on all critical jobs
  release-readiness:
    name: Release Readiness
    needs: [format, clippy, test, smoke-test-linux, smoke-test-macos, performance-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check job results
        run: |
          if [[ "${{ needs.format.result }}" != "success" || \
                "${{ needs.clippy.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.smoke-test-linux.result }}" != "success" || \
                "${{ needs.smoke-test-macos.result }}" != "success" || \
                "${{ needs.performance-check.result }}" != "success" ]]; then
            echo "One or more required checks failed"
            exit 1
          fi
          echo "All checks passed! This PR is ready for merge."