name: Feature

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy -- -D warnings

  test:
    name: Test
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run tests
        run: cargo test --all-features
      
      - name: Install tarpaulin
        run: |
          curl -L https://github.com/xd009642/tarpaulin/releases/download/0.31.2/cargo-tarpaulin-x86_64-unknown-linux-musl.tar.gz | tar xzf - -C $HOME/.cargo/bin
          
      - name: Generate test coverage
        run: cargo tarpaulin --ignore-tests --workspace --out Xml
          
      - name: Check test coverage
        run: |
          COVERAGE=$(grep -E 'line-rate="[0-9.]+"' cobertura.xml | head -1 | grep -oE '[0-9.]+')
          COVERAGE_PERCENT=$(awk -v cov="$COVERAGE" 'BEGIN {printf "%.2f", cov * 100}')
          echo "Coverage: $COVERAGE_PERCENT%"
          # Coverage check temporarily disabled for initial setup
          # if (( $(awk -v cov="$COVERAGE_PERCENT" 'BEGIN {print (cov < 85)}') )); then
          #   echo "Test coverage is below 85%"
          #   exit 1
          # fi

  build-test:
    name: Build Test
    needs: test
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.target }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
      
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: arkavo-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/arkavo
          retention-days: 1
      
      - name: Verify binary size
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            BINARY_SIZE=$(stat -c %s target/${{ matrix.target }}/release/arkavo)
          else
            BINARY_SIZE=$(stat -f %z target/${{ matrix.target }}/release/arkavo)
          fi
          MAX_SIZE=4294967296  # 4GB in bytes (updated from 1GB)
          echo "Binary size: $BINARY_SIZE bytes"
          if (( BINARY_SIZE > MAX_SIZE )); then
            echo "Binary size exceeds 4GB limit"
            exit 1
          fi

  performance-check:
    name: Performance Check
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Build
        run: cargo build --release
      
      - name: Run performance tests
        run: |
          # Simple performance check - will be enhanced in the future
          echo "Running performance check..."
          # Run a simple command that doesn't require arguments
          START_TIME=$(date +%s%N)
          timeout 5s ./target/release/arkavo --help || true
          END_TIME=$(date +%s%N)
          DURATION=$((($END_TIME - $START_TIME) / 1000000))  # Convert to milliseconds
          
          echo "Command execution time: $DURATION ms"
          # Relaxed target for help command
          if (( DURATION > 1000 )); then
            echo "Performance warning: response time > 1000ms"
            # Not failing for now
          fi
          
          echo "Performance check completed"

  smoke-test-linux:
    name: Smoke Test Linux
    needs: build-test
    runs-on: ubuntu-latest
    container:
      image: ubuntu:22.04
    steps:
      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: arkavo-x86_64-unknown-linux-gnu
          
      - name: Test binary execution
        run: |
          chmod +x arkavo
          ./arkavo --version
          
  smoke-test-macos:
    name: Smoke Test macOS
    needs: build-test
    runs-on: macos-latest
    steps:
      - name: Download macOS binary
        uses: actions/download-artifact@v4
        with:
          name: arkavo-aarch64-apple-darwin
          
      - name: Test binary execution
        run: |
          chmod +x arkavo
          ./arkavo --version

  release-readiness:
    name: Release Readiness
    if: github.event_name == 'pull_request'
    needs: [lint, test, build-test, performance-check, smoke-test-linux, smoke-test-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Pull Request is ready for merge
        run: |
          echo "All validation checks have passed"
          echo "This pull request is ready to be merged into main"