name: Release

on:
  push:
    branches: [main]
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  release:
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          
      - name: Extract version
        id: version
        run: |
          VERSION=$(grep '^version =' Cargo.toml | head -n 1 | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: true
          generate_release_notes: true
          body: |
            ## Arkavo Edge ${{ steps.version.outputs.version }}
            
            Release of the Arkavo agentic CLI tool.
            
            ### Installation
            
            Download the appropriate binary for your platform and place it in your PATH.
            
            ### Binaries
            
            - Linux (x64): arkavo-${{ steps.version.outputs.version }}-x86_64-unknown-linux-musl.tar.gz
            - Linux (x64, .deb): arkavo_${{ steps.version.outputs.version }}_amd64.deb
            - macOS (ARM64): arkavo-${{ steps.version.outputs.version }}-aarch64-apple-darwin.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            
  build-linux-x86_64:
    needs: release
    name: Build Linux (x86_64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
          profile: minimal
          override: true
          
      - name: Install musl tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target x86_64-unknown-linux-musl
          
      - name: Prepare binary
        run: |
          cd target/x86_64-unknown-linux-musl/release
          strip arkavo
          tar -czf arkavo-${{ needs.release.outputs.version }}-x86_64-unknown-linux-musl.tar.gz arkavo
          shasum -a 256 arkavo-${{ needs.release.outputs.version }}-x86_64-unknown-linux-musl.tar.gz > arkavo-${{ needs.release.outputs.version }}-x86_64-unknown-linux-musl.tar.gz.sha256
          
      - name: Create .deb package
        run: |
          mkdir -p debian/DEBIAN
          mkdir -p debian/usr/bin
          cp target/x86_64-unknown-linux-musl/release/arkavo debian/usr/bin/
          cat > debian/DEBIAN/control << EOF
          Package: arkavo
          Version: ${{ needs.release.outputs.version }}
          Architecture: amd64
          Maintainer: Arkavo LLC <support@arkavo.com>
          Description: Arkavo Edge - AI-agent development CLI tool
           Arkavo Edge is an open-source agentic CLI tool that provides
           developer-centric capabilities for AI-agent development and
           framework maintenance.
          Section: devel
          Priority: optional
          Homepage: https://github.com/arkavo/arkavo-edge
          EOF
          dpkg-deb --build debian arkavo_${{ needs.release.outputs.version }}_amd64.deb
          dpkg-deb --info arkavo_${{ needs.release.outputs.version }}_amd64.deb
          shasum -a 256 arkavo_${{ needs.release.outputs.version }}_amd64.deb > arkavo_${{ needs.release.outputs.version }}_amd64.deb.sha256
      
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release.outputs.version }}
          files: |
            ./target/x86_64-unknown-linux-musl/release/arkavo-${{ needs.release.outputs.version }}-x86_64-unknown-linux-musl.tar.gz
            ./target/x86_64-unknown-linux-musl/release/arkavo-${{ needs.release.outputs.version }}-x86_64-unknown-linux-musl.tar.gz.sha256
            ./arkavo_${{ needs.release.outputs.version }}_amd64.deb
            ./arkavo_${{ needs.release.outputs.version }}_amd64.deb.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  build-macos-arm64:
    needs: release
    name: Build macOS (ARM64)
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          profile: minimal
          override: true

      - name: Install idb-companion
        run: |
          brew tap facebook/fb
          brew install idb-companion

      - name: Decode and import signing certificate
        run: |
          echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > /tmp/certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import /tmp/certificate.p12 -k build.keychain -P "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target aarch64-apple-darwin

      - name: Strip binary
        run: |
          strip target/aarch64-apple-darwin/release/arkavo

      - name: Codesign binary
        run: |
          codesign --force --options=runtime --timestamp --sign "Developer ID Application: Arkavo LLC (M8GS7ZT95Y)" target/aarch64-apple-darwin/release/arkavo

      - name: Create ZIP for notarization
        run: |
          cd target/aarch64-apple-darwin/release
          zip arkavo.zip arkavo

      - name: Notarize binary
        run: |
          cd target/aarch64-apple-darwin/release
          xcrun notarytool submit arkavo.zip \
            --apple-id ${{ secrets.APPLE_ID }} \
            --password ${{ secrets.APPLE_APP_PASSWORD }} \
            --team-id M8GS7ZT95Y \
            --wait \
            --timeout 600 || {
              echo "Notarization failed. Please check Apple Developer account status and credentials."
              exit 1
            }

      - name: Validate notarization
        run: |
          cd target/aarch64-apple-darwin/release
          # checked online by Gatekeeper
          spctl -a -v arkavo || echo "Note: spctl may fail in CI but the binary is notarized"
          
      - name: Cleanup temporary files
        run: |
          cd target/aarch64-apple-darwin/release
          rm -f arkavo.zip

      - name: Prepare binary
        run: |
          cd target/aarch64-apple-darwin/release
          tar -czf arkavo-${{ needs.release.outputs.version }}-aarch64-apple-darwin.tar.gz arkavo
          shasum -a 256 arkavo-${{ needs.release.outputs.version }}-aarch64-apple-darwin.tar.gz > arkavo-${{ needs.release.outputs.version }}-aarch64-apple-darwin.tar.gz.sha256

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release.outputs.version }}
          files: |
            ./target/aarch64-apple-darwin/release/arkavo-${{ needs.release.outputs.version }}-aarch64-apple-darwin.tar.gz
            ./target/aarch64-apple-darwin/release/arkavo-${{ needs.release.outputs.version }}-aarch64-apple-darwin.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  smoke-test-linux:
    needs: [release, build-linux-x86_64]
    name: Smoke Test Linux Binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container:
          - ubuntu:latest
          - ubuntu:22.04
    container:
      image: ${{ matrix.container }}
    steps:
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y curl ca-certificates
          
      - name: Download and test tar.gz binary
        run: |
          curl -L -o arkavo.tar.gz https://github.com/${{ github.repository }}/releases/download/${{ needs.release.outputs.version }}/arkavo-${{ needs.release.outputs.version }}-x86_64-unknown-linux-musl.tar.gz
          tar -xzf arkavo.tar.gz
          chmod +x arkavo
          ./arkavo --version
          
      - name: Download and test .deb package
        run: |
          curl -L -o arkavo.deb https://github.com/${{ github.repository }}/releases/download/${{ needs.release.outputs.version }}/arkavo_${{ needs.release.outputs.version }}_amd64.deb
          apt-get install -y ./arkavo.deb
          arkavo --version
  
  smoke-test-macos:
    needs: [release, build-macos-arm64]
    name: Smoke Test macOS Binary
    runs-on: macos-latest
    steps:
      - name: Download and test binary
        run: |
          curl -L -o arkavo.tar.gz https://github.com/${{ github.repository }}/releases/download/${{ needs.release.outputs.version }}/arkavo-${{ needs.release.outputs.version }}-aarch64-apple-darwin.tar.gz
          tar -xzf arkavo.tar.gz
          chmod +x arkavo
          ./arkavo --version
  
  publish-release:
    needs: [release, smoke-test-linux, smoke-test-macos]
    name: Publish Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Update release to published
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release.outputs.version }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}