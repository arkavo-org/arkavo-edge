import XCTest
import Foundation

// MARK: - Command Structures
struct TapCommand: Codable {
    enum TargetType: String, Codable {
        case coordinate
        case text
        case accessibilityId
    }
    
    let id: String
    let targetType: TargetType
    let x: Double?
    let y: Double?
    let text: String?
    let accessibilityId: String?
    let timeout: TimeInterval?
}

struct CommandResponse: Codable {
    let id: String
    let success: Bool
    let error: String?
    let result: [String: Any]?
    
    enum CodingKeys: String, CodingKey {
        case id, success, error, result
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(success, forKey: .success)
        try container.encodeIfPresent(error, forKey: .error)
        if let result = result {
            let jsonData = try JSONSerialization.data(withJSONObject: result)
            let jsonDict = try JSONSerialization.jsonObject(with: jsonData) as? [String: Any]
            try container.encode(jsonDict, forKey: .result)
        }
    }
}

// MARK: - Unix Socket Server
class UnixSocketServer {
    private let socketPath: String
    private var fileHandle: FileHandle?
    private var commandHandler: ((Data) -> Void)?
    
    init(socketPath: String) {
        self.socketPath = socketPath
    }
    
    func start(commandHandler: @escaping (Data) -> Void) throws {
        self.commandHandler = commandHandler
        
        // Create Unix socket
        let socketFD = socket(AF_UNIX, SOCK_STREAM, 0)
        guard socketFD >= 0 else {
            throw NSError(domain: "UnixSocket", code: errno, userInfo: [NSLocalizedDescriptionKey: "Failed to create socket"])
        }
        
        // Bind to socket path
        var addr = sockaddr_un()
        addr.sun_family = sa_family_t(AF_UNIX)
        
        // Remove existing socket file
        unlink(socketPath)
        
        // Copy socket path
        withUnsafeMutablePointer(to: &addr.sun_path) { ptr in
            let pathBytes = socketPath.utf8CString
            pathBytes.withUnsafeBufferPointer { buffer in
                ptr.withMemoryRebound(to: CChar.self, capacity: MemoryLayout.size(ofValue: addr.sun_path)) { dest in
                    _ = strcpy(dest, buffer.baseAddress!)
                }
            }
        }
        
        let bindResult = withUnsafePointer(to: &addr) { addrPtr in
            addrPtr.withMemoryRebound(to: sockaddr.self, capacity: 1) { sockaddrPtr in
                bind(socketFD, sockaddrPtr, socklen_t(MemoryLayout<sockaddr_un>.size))
            }
        }
        
        guard bindResult == 0 else {
            close(socketFD)
            throw NSError(domain: "UnixSocket", code: errno, userInfo: [NSLocalizedDescriptionKey: "Failed to bind socket"])
        }
        
        // Listen for connections
        guard listen(socketFD, 5) == 0 else {
            close(socketFD)
            throw NSError(domain: "UnixSocket", code: errno, userInfo: [NSLocalizedDescriptionKey: "Failed to listen on socket"])
        }
        
        // Accept connections in background
        DispatchQueue.global(qos: .background).async {
            while true {
                let clientFD = accept(socketFD, nil, nil)
                if clientFD >= 0 {
                    self.handleClient(clientFD)
                }
            }
        }
    }
    
    private func handleClient(_ clientFD: Int32) {
        let fileHandle = FileHandle(fileDescriptor: clientFD, closeOnDealloc: true)
        
        // Read data in a loop
        while true {
            autoreleasepool {
                do {
                    if let data = try fileHandle.read(upToCount: 4096), !data.isEmpty {
                        // Process each line (commands are newline-delimited JSON)
                        let lines = data.split(separator: UInt8(ascii: "\n"))
                        for line in lines {
                            if !line.isEmpty {
                                commandHandler?(Data(line))
                            }
                        }
                    } else {
                        // Connection closed
                        return
                    }
                } catch {
                    print("Error reading from client: \(error)")
                    return
                }
            }
        }
    }
    
    func sendResponse(_ response: Data) {
        // For Unix sockets, we write back to the same connection
        // This is simplified - in reality we'd track which client sent which command
        if let handle = fileHandle {
            do {
                try handle.write(contentsOf: response)
                try handle.write(contentsOf: "\n".data(using: .utf8)!)
            } catch {
                print("Error sending response: \(error)")
            }
        }
    }
}

// MARK: - Test Runner
class ArkavoTestRunner: XCTestCase {
    static let socketPath = "{{SOCKET_PATH}}"
    static var socketServer: UnixSocketServer?
    static var app: XCUIApplication?
    
    override class func setUp() {
        super.setUp()
        
        // Start Unix socket server
        socketServer = UnixSocketServer(socketPath: socketPath)
        do {
            try socketServer?.start { commandData in
                // Process command in test context
                if let runner = self.current {
                    runner.processCommand(commandData)
                }
            }
        } catch {
            print("Failed to start Unix socket server: \(error)")
        }
        
        // Launch the app
        app = XCUIApplication()
        app?.launch()
    }
    
    // Track current test instance for command processing
    static weak var current: ArkavoTestRunner?
    
    override func setUp() {
        super.setUp()
        Self.current = self
    }
    
    func testRunCommands() {
        // This test runs indefinitely, processing commands
        let timeout: TimeInterval = 3600 // 1 hour timeout
        let expectation = self.expectation(description: "Command processing")
        expectation.isInverted = true // We don't expect this to fulfill
        
        wait(for: [expectation], timeout: timeout)
    }
    
    private func processCommand(_ commandData: Data) {
        do {
            let decoder = JSONDecoder()
            let command = try decoder.decode(TapCommand.self, from: commandData)
            
            var response: CommandResponse
            
            switch command.targetType {
            case .coordinate:
                response = handleCoordinateTap(command)
            case .text:
                response = handleTextTap(command)
            case .accessibilityId:
                response = handleAccessibilityTap(command)
            }
            
            // Send response back
            if let responseData = try? JSONEncoder().encode(response) {
                Self.socketServer?.sendResponse(responseData)
            }
            
        } catch {
            print("Error processing command: \(error)")
            let errorResponse = CommandResponse(
                id: "unknown",
                success: false,
                error: error.localizedDescription,
                result: nil
            )
            if let responseData = try? JSONEncoder().encode(errorResponse) {
                Self.socketServer?.sendResponse(responseData)
            }
        }
    }
    
    private func handleCoordinateTap(_ command: TapCommand) -> CommandResponse {
        guard let x = command.x, let y = command.y else {
            return CommandResponse(
                id: command.id,
                success: false,
                error: "Missing x or y coordinate",
                result: nil
            )
        }
        
        guard let app = Self.app else {
            return CommandResponse(
                id: command.id,
                success: false,
                error: "XCUIApplication not initialized",
                result: nil
            )
        }
        
        // Create coordinate and tap
        let coordinate = app.coordinate(withNormalizedOffset: CGVector(dx: 0, dy: 0))
            .withOffset(CGVector(dx: x, dy: y))
        
        coordinate.tap()
        
        return CommandResponse(
            id: command.id,
            success: true,
            error: nil,
            result: ["x": x, "y": y, "method": "coordinate"]
        )
    }
    
    private func handleTextTap(_ command: TapCommand) -> CommandResponse {
        guard let text = command.text else {
            return CommandResponse(
                id: command.id,
                success: false,
                error: "Missing text parameter",
                result: nil
            )
        }
        
        guard let app = Self.app else {
            return CommandResponse(
                id: command.id,
                success: false,
                error: "XCUIApplication not initialized",
                result: nil
            )
        }
        
        let timeout = command.timeout ?? 5.0
        
        // Try to find element with matching text
        let predicate = NSPredicate(format: "label == %@ OR title == %@ OR value == %@", text, text, text)
        let element = app.descendants(matching: .any).matching(predicate).firstMatch
        
        if element.waitForExistence(timeout: timeout) {
            element.tap()
            
            // Get element info for response
            let frame = element.frame
            return CommandResponse(
                id: command.id,
                success: true,
                error: nil,
                result: [
                    "text": text,
                    "method": "text",
                    "elementType": element.elementType.rawValue,
                    "frame": [
                        "x": frame.origin.x,
                        "y": frame.origin.y,
                        "width": frame.width,
                        "height": frame.height
                    ]
                ]
            )
        } else {
            return CommandResponse(
                id: command.id,
                success: false,
                error: "Element with text '\(text)' not found within \(timeout) seconds",
                result: nil
            )
        }
    }
    
    private func handleAccessibilityTap(_ command: TapCommand) -> CommandResponse {
        guard let accessibilityId = command.accessibilityId else {
            return CommandResponse(
                id: command.id,
                success: false,
                error: "Missing accessibilityId parameter",
                result: nil
            )
        }
        
        guard let app = Self.app else {
            return CommandResponse(
                id: command.id,
                success: false,
                error: "XCUIApplication not initialized",
                result: nil
            )
        }
        
        let timeout = command.timeout ?? 5.0
        
        // Find element by accessibility identifier
        let element = app.descendants(matching: .any).matching(identifier: accessibilityId).firstMatch
        
        if element.waitForExistence(timeout: timeout) {
            element.tap()
            
            // Get element info for response
            let frame = element.frame
            return CommandResponse(
                id: command.id,
                success: true,
                error: nil,
                result: [
                    "accessibilityId": accessibilityId,
                    "method": "accessibilityId",
                    "elementType": element.elementType.rawValue,
                    "frame": [
                        "x": frame.origin.x,
                        "y": frame.origin.y,
                        "width": frame.width,
                        "height": frame.height
                    ]
                ]
            )
        } else {
            return CommandResponse(
                id: command.id,
                success: false,
                error: "Element with accessibility ID '\(accessibilityId)' not found within \(timeout) seconds",
                result: nil
            )
        }
    }
}