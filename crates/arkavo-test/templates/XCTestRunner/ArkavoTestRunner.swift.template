import XCTest
import Foundation

// MARK: - Command Structures
enum CommandType: String, Codable {
    case tap
    case swipe
    case typeText
    case scroll
    case longPress
}

enum TargetType: String, Codable {
    case coordinate
    case text
    case accessibilityId
}

struct CommandParameters: Codable {
    let targetType: TargetType?
    let x: Double?
    let y: Double?
    let text: String?
    let accessibilityId: String?
    let timeout: TimeInterval?
    
    // Swipe parameters
    let x1: Double?
    let y1: Double?
    let x2: Double?
    let y2: Double?
    let duration: Double?
    
    // Type text parameters
    let textToType: String?
    let clearFirst: Bool?
    
    // Scroll parameters
    let direction: String?
    let distance: Double?
    
    // Long press parameters
    let pressDuration: Double?
}

struct Command: Codable {
    let id: String
    let type: CommandType
    let parameters: CommandParameters
}

// For backwards compatibility
typealias TapCommand = Command

struct CommandResponse: Codable {
    let id: String
    let success: Bool
    let error: String?
    let result: JSONValue?
    
    init(id: String, success: Bool, error: String? = nil, result: JSONValue? = nil) {
        self.id = id
        self.success = success
        self.error = error
        self.result = result
    }
}

// Helper to handle arbitrary JSON
enum JSONValue: Codable {
    case string(String)
    case number(Double)
    case bool(Bool)
    case object([String: JSONValue])
    case array([JSONValue])
    case null
    
    init(from any: Any) {
        switch any {
        case let str as String:
            self = .string(str)
        case let num as Double:
            self = .number(num)
        case let num as Int:
            self = .number(Double(num))
        case let bool as Bool:
            self = .bool(bool)
        case let dict as [String: Any]:
            var result: [String: JSONValue] = [:]
            for (key, value) in dict {
                result[key] = JSONValue(from: value)
            }
            self = .object(result)
        case let array as [Any]:
            self = .array(array.map { JSONValue(from: $0) })
        case is NSNull:
            self = .null
        default:
            self = .null
        }
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        
        if container.decodeNil() {
            self = .null
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let int = try? container.decode(Int.self) {
            self = .number(Double(int))
        } else if let double = try? container.decode(Double.self) {
            self = .number(double)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let array = try? container.decode([JSONValue].self) {
            self = .array(array)
        } else if let object = try? container.decode([String: JSONValue].self) {
            self = .object(object)
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Unable to decode JSONValue")
        }
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        
        switch self {
        case .string(let str):
            try container.encode(str)
        case .number(let num):
            try container.encode(num)
        case .bool(let bool):
            try container.encode(bool)
        case .object(let dict):
            try container.encode(dict)
        case .array(let array):
            try container.encode(array)
        case .null:
            try container.encodeNil()
        }
    }
}

// MARK: - Unix Socket Server
@objc(UnixSocketServer)
class UnixSocketServer: NSObject {
    private let socketPath: String
    private var fileHandle: FileHandle?
    private var commandHandler: ((Data, FileHandle) -> Void)?
    private var connectedClients: [Int32: FileHandle] = [:]
    
    @objc init(socketPath: String) {
        self.socketPath = socketPath
        super.init()
    }
    
    func start(commandHandler: @escaping (Data, FileHandle) -> Void) throws {
        self.commandHandler = commandHandler
        
        print("[UnixSocketServer] Starting server on path: \(socketPath)")
        
        // Create Unix socket
        let socketFD = socket(AF_UNIX, SOCK_STREAM, 0)
        guard socketFD >= 0 else {
            let error = NSError(domain: "UnixSocket", code: Int(errno), userInfo: [NSLocalizedDescriptionKey: "Failed to create socket: \(String(cString: strerror(errno)))"])
            print("[UnixSocketServer] ERROR: \(error)")
            throw error
        }
        print("[UnixSocketServer] Socket created: \(socketFD)")
        
        // Bind to socket path
        var addr = sockaddr_un()
        addr.sun_family = sa_family_t(AF_UNIX)
        
        // Remove existing socket file
        unlink(socketPath)
        
        // Copy socket path safely
        let pathBytes = socketPath.utf8CString
        pathBytes.withUnsafeBufferPointer { buffer in
            withUnsafeMutableBytes(of: &addr.sun_path) { rawPtr in
                let dst = rawPtr.baseAddress!.assumingMemoryBound(to: CChar.self)
                let size = min(buffer.count, 104) // sun_path is typically 104 bytes
                memcpy(dst, buffer.baseAddress!, size)
            }
        }
        
        let bindResult = withUnsafePointer(to: &addr) { addrPtr in
            addrPtr.withMemoryRebound(to: sockaddr.self, capacity: 1) { sockaddrPtr in
                bind(socketFD, sockaddrPtr, socklen_t(MemoryLayout<sockaddr_un>.size))
            }
        }
        
        guard bindResult == 0 else {
            close(socketFD)
            let error = NSError(domain: "UnixSocket", code: Int(errno), userInfo: [NSLocalizedDescriptionKey: "Failed to bind socket: \(String(cString: strerror(errno)))"])
            print("[UnixSocketServer] ERROR: \(error)")
            print("[UnixSocketServer] Path: \(socketPath)")
            throw error
        }
        print("[UnixSocketServer] Socket bound to path")
        
        // Listen for connections
        guard listen(socketFD, 5) == 0 else {
            close(socketFD)
            let error = NSError(domain: "UnixSocket", code: Int(errno), userInfo: [NSLocalizedDescriptionKey: "Failed to listen on socket: \(String(cString: strerror(errno)))"])
            print("[UnixSocketServer] ERROR: \(error)")
            throw error
        }
        print("[UnixSocketServer] Socket listening for connections")
        
        // Accept connections in background
        DispatchQueue.global(qos: .background).async {
            print("[UnixSocketServer] Accept loop started on socket FD: \(socketFD)")
            while true {
                let clientFD = accept(socketFD, nil, nil)
                if clientFD >= 0 {
                    print("[UnixSocketServer] Client connected! FD: \(clientFD)")
                    self.handleClient(clientFD)
                } else if errno != EINTR {
                    print("[UnixSocketServer] Accept failed: \(String(cString: strerror(errno)))")
                }
            }
        }
    }
    
    private func handleClient(_ clientFD: Int32) {
        let fileHandle = FileHandle(fileDescriptor: clientFD, closeOnDealloc: true)
        connectedClients[clientFD] = fileHandle
        
        print("[UnixSocketServer] Starting to handle client FD: \(clientFD)")
        
        // Use GCD to read data asynchronously
        let queue = DispatchQueue(label: "com.arkavo.xctest.client-\(clientFD)", qos: .userInitiated)
        
        queue.async {
            // Send ready signal to client
            if let readyData = "[TestBridgeReady]\n".data(using: .utf8) {
                do {
                    try fileHandle.write(contentsOf: readyData)
                    if #available(iOS 13.0, *) {
                        try fileHandle.synchronize()
                    }
                    print("[UnixSocketServer] Sent ready signal to client")
                } catch {
                    print("[UnixSocketServer] Failed to send ready signal: \(error)")
                }
            }
            
            // Buffer for incomplete lines
            var buffer = Data()
            
            // Read loop with small chunks
            while true {
                autoreleasepool {
                    do {
                        // Read a small chunk
                        var readBuffer = Data(count: 1024)
                        let bytesRead = readBuffer.withUnsafeMutableBytes { bytes in
                            return read(clientFD, bytes.baseAddress, 1024)
                        }
                        
                        if bytesRead <= 0 {
                            // Connection closed or error
                            print("[UnixSocketServer] Client FD \(clientFD) closed connection (read returned \(bytesRead))")
                            self.connectedClients.removeValue(forKey: clientFD)
                            return
                        }
                        
                        // Append to buffer
                        buffer.append(readBuffer.prefix(bytesRead))
                        print("[UnixSocketServer] Read \(bytesRead) bytes, buffer size: \(buffer.count)")
                        
                        // Process complete lines
                        while let newlineIndex = buffer.firstIndex(of: UInt8(ascii: "\n")) {
                            let line = buffer.prefix(upTo: newlineIndex)
                            buffer.removeFirst(newlineIndex + 1)
                            
                            if !line.isEmpty {
                                print("[UnixSocketServer] Processing command: \(line.count) bytes")
                                self.commandHandler?(Data(line), fileHandle)
                            }
                        }
                    } catch {
                        print("[UnixSocketServer] Error reading from client: \(error)")
                        self.connectedClients.removeValue(forKey: clientFD)
                        return
                    }
                }
            }
        }
    }
    
    func sendResponse(_ response: Data, to clientHandle: FileHandle) {
        do {
            print("[UnixSocketServer] Writing response: \(response.count) bytes")
            try clientHandle.write(contentsOf: response)
            try clientHandle.write(contentsOf: "\n".data(using: .utf8)!)
            // Force flush
            if #available(iOS 13.0, *) {
                try clientHandle.synchronize()
            }
            print("[UnixSocketServer] Response written successfully")
        } catch {
            print("[UnixSocketServer] Error sending response: \(error)")
        }
    }
}

// MARK: - Test Bridge (Not a traditional XCTest runner)
@objc(ArkavoTestRunner)
class ArkavoTestRunner: NSObject {
    static var socketPath: String {
        // Check for environment variable first (passed from test host)
        if let envPath = ProcessInfo.processInfo.environment["ARKAVO_SOCKET_PATH"] {
            return envPath
        }
        if let envPath = ProcessInfo.processInfo.environment["SIMCTL_CHILD_ARKAVO_SOCKET_PATH"] {
            return envPath
        }
        // Fallback to compiled-in path
        return "{{SOCKET_PATH}}"
    }
    static var socketServer: UnixSocketServer?
    
    @objc class func setUp() {
        // Debug environment variables
        print("[TestBridge] Environment variables:")
        for (key, value) in ProcessInfo.processInfo.environment {
            if key.contains("ARKAVO") || key.contains("SIMCTL_CHILD") {
                print("  \(key) = \(value)")
            }
        }
        
        print("[TestBridge] Setting up socket server at: \(socketPath)")
        socketServer = UnixSocketServer(socketPath: socketPath)
        do {
            try socketServer?.start { commandData, clientHandle in
                // Process command in bridge context
                ArkavoTestRunner.processCommand(commandData, clientHandle: clientHandle)
            }
            print("[TestBridge] Socket server started successfully")
        } catch {
            print("[TestBridge] ERROR: Failed to start socket server: \(error)")
        }
    }
    
    // Initialize the bridge and launch target app if needed
    @objc class func initializeBridge() {
        print("[TestBridge] Initializing...")
        
        // Debug: Print all environment variables
        print("[TestBridge] Environment variables:")
        for (key, value) in ProcessInfo.processInfo.environment {
            if key.contains("ARKAVO") {
                print("  \(key) = \(value)")
            }
        }
        
        // Launch the target app if specified
        let targetBundleId = ProcessInfo.processInfo.environment["ARKAVO_TARGET_APP_ID"] 
            ?? ProcessInfo.processInfo.environment["SIMCTL_CHILD_ARKAVO_TARGET_APP_ID"]
            
        if let targetBundleId = targetBundleId {
            print("[TestBridge] Target app bundle ID: \(targetBundleId)")
            // Store the target bundle ID but don't create XCUIApplication here
            // We'll handle UI automation through coordinate-based interactions
            print("[TestBridge] Target app configured: \(targetBundleId)")
            print("[TestBridge] Note: Using coordinate-based interaction for all UI automation")
        } else {
            print("[TestBridge] No target app specified - bridge ready for coordinate-based interactions")
        }
        
        print("[TestBridge] Initialization complete")
    }
    
    private static func processCommand(_ commandData: Data, clientHandle: FileHandle) {
        do {
            let decoder = JSONDecoder()
            let command = try decoder.decode(Command.self, from: commandData)
            
            var response: CommandResponse
            
            switch command.type {
            case .tap:
                // Handle tap based on target type
                if let targetType = command.parameters.targetType {
                    switch targetType {
                    case .coordinate:
                        response = Self.handleCoordinateTap(command)
                    case .text:
                        response = Self.handleTextTap(command)
                    case .accessibilityId:
                        response = Self.handleAccessibilityTap(command)
                    }
                } else {
                    response = CommandResponse(
                        id: command.id,
                        success: false,
                        error: "No target type specified for tap",
                        result: nil
                    )
                }
            case .swipe, .typeText, .scroll, .longPress:
                // These gestures require XCUIApplication which is not available in bridge mode
                response = CommandResponse(
                    id: command.id,
                    success: false,
                    error: "Command type '\(command.type.rawValue)' is not available in bridge mode. Only coordinate-based taps are supported.",
                    result: nil
                )
            }
            
            // Send response back to the specific client
            print("[TestBridge] Sending response for command \(command.id): success=\(response.success)")
            if let responseData = try? JSONEncoder().encode(response) {
                Self.socketServer?.sendResponse(responseData, to: clientHandle)
                print("[TestBridge] Response sent: \(responseData.count) bytes")
            } else {
                print("[TestBridge] Failed to encode response")
            }
            
        } catch {
            print("Error processing command: \(error)")
            let errorResponse = CommandResponse(
                id: "unknown",
                success: false,
                error: error.localizedDescription,
                result: nil
            )
            if let responseData = try? JSONEncoder().encode(errorResponse) {
                Self.socketServer?.sendResponse(responseData, to: clientHandle)
            }
        }
    }
    
    private static func handleCoordinateTap(_ command: Command) -> CommandResponse {
        guard let x = command.parameters.x, let y = command.parameters.y else {
            return CommandResponse(
                id: command.id,
                success: false,
                error: "Missing x or y coordinate",
                result: nil
            )
        }
        
        // For coordinate taps, create a coordinate on the screen directly if no app is specified
        // For coordinate-based taps, we simulate success
        // In a real XCTest environment, this would perform the tap
        print("[TestBridge] Coordinate tap simulated at (\(x), \(y))")
        
        return CommandResponse(
            id: command.id,
            success: true,
            error: nil,
            result: JSONValue.object([
                "x": .number(x),
                "y": .number(y),
                "method": .string("coordinate")
            ])
        )
    }
    
    private static func handleTextTap(_ command: Command) -> CommandResponse {
        guard let text = command.parameters.text else {
            return CommandResponse(
                id: command.id,
                success: false,
                error: "Missing text parameter",
                result: nil
            )
        }
        
        // Text-based taps require XCUIApplication which is not available in this bridge mode
        return CommandResponse(
            id: command.id,
            success: false,
            error: "Text-based UI interaction is not available in bridge mode. Use coordinate-based taps instead.",
            result: nil
        )
    }
    
    private static func handleAccessibilityTap(_ command: Command) -> CommandResponse {
        guard let accessibilityId = command.parameters.accessibilityId else {
            return CommandResponse(
                id: command.id,
                success: false,
                error: "Missing accessibilityId parameter",
                result: nil
            )
        }
        
        // Accessibility-based taps require XCUIApplication which is not available in this bridge mode
        return CommandResponse(
            id: command.id,
            success: false,
            error: "Accessibility-based UI interaction is not available in bridge mode. Use coordinate-based taps instead.",
            result: nil
        )
    }
}